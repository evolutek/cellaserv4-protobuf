// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cellaserv.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cellaserv_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cellaserv_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cellaserv_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cellaserv_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cellaserv_2eproto;
namespace cellaserv {
class Cancel;
class CancelDefaultTypeInternal;
extern CancelDefaultTypeInternal _Cancel_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Publish;
class PublishDefaultTypeInternal;
extern PublishDefaultTypeInternal _Publish_default_instance_;
class Reply;
class ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
class Reply_Error;
class Reply_ErrorDefaultTypeInternal;
extern Reply_ErrorDefaultTypeInternal _Reply_Error_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Subscribe;
class SubscribeDefaultTypeInternal;
extern SubscribeDefaultTypeInternal _Subscribe_default_instance_;
}  // namespace cellaserv
PROTOBUF_NAMESPACE_OPEN
template<> ::cellaserv::Cancel* Arena::CreateMaybeMessage<::cellaserv::Cancel>(Arena*);
template<> ::cellaserv::Message* Arena::CreateMaybeMessage<::cellaserv::Message>(Arena*);
template<> ::cellaserv::Publish* Arena::CreateMaybeMessage<::cellaserv::Publish>(Arena*);
template<> ::cellaserv::Reply* Arena::CreateMaybeMessage<::cellaserv::Reply>(Arena*);
template<> ::cellaserv::Reply_Error* Arena::CreateMaybeMessage<::cellaserv::Reply_Error>(Arena*);
template<> ::cellaserv::Request* Arena::CreateMaybeMessage<::cellaserv::Request>(Arena*);
template<> ::cellaserv::Subscribe* Arena::CreateMaybeMessage<::cellaserv::Subscribe>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cellaserv {

enum Reply_Error_Type : int {
  Reply_Error_Type_NoError = 0,
  Reply_Error_Type_NoSuchService = 1,
  Reply_Error_Type_InvalidIdentification = 2,
  Reply_Error_Type_NoSuchMethod = 3,
  Reply_Error_Type_BadArguments = 4,
  Reply_Error_Type_Timeout = 5,
  Reply_Error_Type_Custom = 126,
  Reply_Error_Type_Reply_Error_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Reply_Error_Type_Reply_Error_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Reply_Error_Type_IsValid(int value);
constexpr Reply_Error_Type Reply_Error_Type_Type_MIN = Reply_Error_Type_NoError;
constexpr Reply_Error_Type Reply_Error_Type_Type_MAX = Reply_Error_Type_Custom;
constexpr int Reply_Error_Type_Type_ARRAYSIZE = Reply_Error_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Reply_Error_Type_descriptor();
template<typename T>
inline const std::string& Reply_Error_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Reply_Error_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Reply_Error_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Reply_Error_Type_descriptor(), enum_t_value);
}
inline bool Reply_Error_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Reply_Error_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Reply_Error_Type>(
    Reply_Error_Type_descriptor(), name, value);
}
// ===================================================================

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cellaserv.Request) */ {
 public:
  inline Request() : Request(nullptr) {};
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cellaserv.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cellaserv_2eproto);
    return ::descriptor_table_cellaserv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdentificationFieldNumber = 3,
    kMethodFieldNumber = 4,
    kDataFieldNumber = 5,
    kContextEventNameFieldNumber = 6,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string identification = 3;
  bool has_identification() const;
  private:
  bool _internal_has_identification() const;
  public:
  void clear_identification();
  const std::string& identification() const;
  void set_identification(const std::string& value);
  void set_identification(std::string&& value);
  void set_identification(const char* value);
  void set_identification(const char* value, size_t size);
  std::string* mutable_identification();
  std::string* release_identification();
  void set_allocated_identification(std::string* identification);
  private:
  const std::string& _internal_identification() const;
  void _internal_set_identification(const std::string& value);
  std::string* _internal_mutable_identification();
  public:

  // string method = 4;
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // bytes data = 5;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string context_event_name = 6;
  bool has_context_event_name() const;
  private:
  bool _internal_has_context_event_name() const;
  public:
  void clear_context_event_name();
  const std::string& context_event_name() const;
  void set_context_event_name(const std::string& value);
  void set_context_event_name(std::string&& value);
  void set_context_event_name(const char* value);
  void set_context_event_name(const char* value, size_t size);
  std::string* mutable_context_event_name();
  std::string* release_context_event_name();
  void set_allocated_context_event_name(std::string* context_event_name);
  private:
  const std::string& _internal_context_event_name() const;
  void _internal_set_context_event_name(const std::string& value);
  std::string* _internal_mutable_context_event_name();
  public:

  // fixed64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:cellaserv.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identification_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_event_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  friend struct ::TableStruct_cellaserv_2eproto;
};
// -------------------------------------------------------------------

class Cancel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cellaserv.Cancel) */ {
 public:
  inline Cancel() : Cancel(nullptr) {};
  virtual ~Cancel();

  Cancel(const Cancel& from);
  Cancel(Cancel&& from) noexcept
    : Cancel() {
    *this = ::std::move(from);
  }

  inline Cancel& operator=(const Cancel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cancel& operator=(Cancel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cancel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cancel* internal_default_instance() {
    return reinterpret_cast<const Cancel*>(
               &_Cancel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Cancel& a, Cancel& b) {
    a.Swap(&b);
  }
  inline void Swap(Cancel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cancel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cancel* New() const final {
    return CreateMaybeMessage<Cancel>(nullptr);
  }

  Cancel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cancel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cancel& from);
  void MergeFrom(const Cancel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cancel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cellaserv.Cancel";
  }
  protected:
  explicit Cancel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cellaserv_2eproto);
    return ::descriptor_table_cellaserv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // fixed64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:cellaserv.Cancel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  friend struct ::TableStruct_cellaserv_2eproto;
};
// -------------------------------------------------------------------

class Reply_Error PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cellaserv.Reply.Error) */ {
 public:
  inline Reply_Error() : Reply_Error(nullptr) {};
  virtual ~Reply_Error();

  Reply_Error(const Reply_Error& from);
  Reply_Error(Reply_Error&& from) noexcept
    : Reply_Error() {
    *this = ::std::move(from);
  }

  inline Reply_Error& operator=(const Reply_Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reply_Error& operator=(Reply_Error&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Reply_Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reply_Error* internal_default_instance() {
    return reinterpret_cast<const Reply_Error*>(
               &_Reply_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Reply_Error& a, Reply_Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Reply_Error* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reply_Error* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reply_Error* New() const final {
    return CreateMaybeMessage<Reply_Error>(nullptr);
  }

  Reply_Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reply_Error>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reply_Error& from);
  void MergeFrom(const Reply_Error& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reply_Error* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cellaserv.Reply.Error";
  }
  protected:
  explicit Reply_Error(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cellaserv_2eproto);
    return ::descriptor_table_cellaserv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Reply_Error_Type Type;
  static constexpr Type NoError =
    Reply_Error_Type_NoError;
  static constexpr Type NoSuchService =
    Reply_Error_Type_NoSuchService;
  static constexpr Type InvalidIdentification =
    Reply_Error_Type_InvalidIdentification;
  static constexpr Type NoSuchMethod =
    Reply_Error_Type_NoSuchMethod;
  static constexpr Type BadArguments =
    Reply_Error_Type_BadArguments;
  static constexpr Type Timeout =
    Reply_Error_Type_Timeout;
  static constexpr Type Custom =
    Reply_Error_Type_Custom;
  static inline bool Type_IsValid(int value) {
    return Reply_Error_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Reply_Error_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Reply_Error_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Reply_Error_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Reply_Error_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Reply_Error_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Reply_Error_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWhatFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string what = 2;
  bool has_what() const;
  private:
  bool _internal_has_what() const;
  public:
  void clear_what();
  const std::string& what() const;
  void set_what(const std::string& value);
  void set_what(std::string&& value);
  void set_what(const char* value);
  void set_what(const char* value, size_t size);
  std::string* mutable_what();
  std::string* release_what();
  void set_allocated_what(std::string* what);
  private:
  const std::string& _internal_what() const;
  void _internal_set_what(const std::string& value);
  std::string* _internal_mutable_what();
  public:

  // .cellaserv.Reply.Error.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::cellaserv::Reply_Error_Type type() const;
  void set_type(::cellaserv::Reply_Error_Type value);
  private:
  ::cellaserv::Reply_Error_Type _internal_type() const;
  void _internal_set_type(::cellaserv::Reply_Error_Type value);
  public:

  // @@protoc_insertion_point(class_scope:cellaserv.Reply.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr what_;
  int type_;
  friend struct ::TableStruct_cellaserv_2eproto;
};
// -------------------------------------------------------------------

class Reply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cellaserv.Reply) */ {
 public:
  inline Reply() : Reply(nullptr) {};
  virtual ~Reply();

  Reply(const Reply& from);
  Reply(Reply&& from) noexcept
    : Reply() {
    *this = ::std::move(from);
  }

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reply& operator=(Reply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
               &_Reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Reply& a, Reply& b) {
    a.Swap(&b);
  }
  inline void Swap(Reply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reply* New() const final {
    return CreateMaybeMessage<Reply>(nullptr);
  }

  Reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cellaserv.Reply";
  }
  protected:
  explicit Reply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cellaserv_2eproto);
    return ::descriptor_table_cellaserv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Reply_Error Error;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kErrorFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .cellaserv.Reply.Error error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::cellaserv::Reply_Error& error() const;
  ::cellaserv::Reply_Error* release_error();
  ::cellaserv::Reply_Error* mutable_error();
  void set_allocated_error(::cellaserv::Reply_Error* error);
  private:
  const ::cellaserv::Reply_Error& _internal_error() const;
  ::cellaserv::Reply_Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::cellaserv::Reply_Error* error);
  ::cellaserv::Reply_Error* unsafe_arena_release_error();

  // fixed64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:cellaserv.Reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::cellaserv::Reply_Error* error_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  friend struct ::TableStruct_cellaserv_2eproto;
};
// -------------------------------------------------------------------

class Subscribe PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cellaserv.Subscribe) */ {
 public:
  inline Subscribe() : Subscribe(nullptr) {};
  virtual ~Subscribe();

  Subscribe(const Subscribe& from);
  Subscribe(Subscribe&& from) noexcept
    : Subscribe() {
    *this = ::std::move(from);
  }

  inline Subscribe& operator=(const Subscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subscribe& operator=(Subscribe&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Subscribe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Subscribe* internal_default_instance() {
    return reinterpret_cast<const Subscribe*>(
               &_Subscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Subscribe& a, Subscribe& b) {
    a.Swap(&b);
  }
  inline void Swap(Subscribe* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subscribe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Subscribe* New() const final {
    return CreateMaybeMessage<Subscribe>(nullptr);
  }

  Subscribe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Subscribe>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Subscribe& from);
  void MergeFrom(const Subscribe& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subscribe* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cellaserv.Subscribe";
  }
  protected:
  explicit Subscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cellaserv_2eproto);
    return ::descriptor_table_cellaserv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
  };
  // string event = 1;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const std::string& event() const;
  void set_event(const std::string& value);
  void set_event(std::string&& value);
  void set_event(const char* value);
  void set_event(const char* value, size_t size);
  std::string* mutable_event();
  std::string* release_event();
  void set_allocated_event(std::string* event);
  private:
  const std::string& _internal_event() const;
  void _internal_set_event(const std::string& value);
  std::string* _internal_mutable_event();
  public:

  // @@protoc_insertion_point(class_scope:cellaserv.Subscribe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_;
  friend struct ::TableStruct_cellaserv_2eproto;
};
// -------------------------------------------------------------------

class Publish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cellaserv.Publish) */ {
 public:
  inline Publish() : Publish(nullptr) {};
  virtual ~Publish();

  Publish(const Publish& from);
  Publish(Publish&& from) noexcept
    : Publish() {
    *this = ::std::move(from);
  }

  inline Publish& operator=(const Publish& from) {
    CopyFrom(from);
    return *this;
  }
  inline Publish& operator=(Publish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Publish& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Publish* internal_default_instance() {
    return reinterpret_cast<const Publish*>(
               &_Publish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Publish& a, Publish& b) {
    a.Swap(&b);
  }
  inline void Swap(Publish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Publish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Publish* New() const final {
    return CreateMaybeMessage<Publish>(nullptr);
  }

  Publish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Publish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Publish& from);
  void MergeFrom(const Publish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Publish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cellaserv.Publish";
  }
  protected:
  explicit Publish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cellaserv_2eproto);
    return ::descriptor_table_cellaserv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string event = 1;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const std::string& event() const;
  void set_event(const std::string& value);
  void set_event(std::string&& value);
  void set_event(const char* value);
  void set_event(const char* value, size_t size);
  std::string* mutable_event();
  std::string* release_event();
  void set_allocated_event(std::string* event);
  private:
  const std::string& _internal_event() const;
  void _internal_set_event(const std::string& value);
  std::string* _internal_mutable_event();
  public:

  // bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:cellaserv.Publish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_cellaserv_2eproto;
};
// -------------------------------------------------------------------

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cellaserv.Message) */ {
 public:
  inline Message() : Message(nullptr) {};
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  enum MessageCase {
    kRequest = 1,
    kReply = 2,
    kCancel = 3,
    kSubscribe = 4,
    kPublish = 5,
    MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cellaserv.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cellaserv_2eproto);
    return ::descriptor_table_cellaserv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
    kReplyFieldNumber = 2,
    kCancelFieldNumber = 3,
    kSubscribeFieldNumber = 4,
    kPublishFieldNumber = 5,
  };
  // .cellaserv.Request request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::cellaserv::Request& request() const;
  ::cellaserv::Request* release_request();
  ::cellaserv::Request* mutable_request();
  void set_allocated_request(::cellaserv::Request* request);
  private:
  const ::cellaserv::Request& _internal_request() const;
  ::cellaserv::Request* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::cellaserv::Request* request);
  ::cellaserv::Request* unsafe_arena_release_request();

  // .cellaserv.Reply reply = 2;
  bool has_reply() const;
  private:
  bool _internal_has_reply() const;
  public:
  void clear_reply();
  const ::cellaserv::Reply& reply() const;
  ::cellaserv::Reply* release_reply();
  ::cellaserv::Reply* mutable_reply();
  void set_allocated_reply(::cellaserv::Reply* reply);
  private:
  const ::cellaserv::Reply& _internal_reply() const;
  ::cellaserv::Reply* _internal_mutable_reply();
  public:
  void unsafe_arena_set_allocated_reply(
      ::cellaserv::Reply* reply);
  ::cellaserv::Reply* unsafe_arena_release_reply();

  // .cellaserv.Cancel cancel = 3;
  bool has_cancel() const;
  private:
  bool _internal_has_cancel() const;
  public:
  void clear_cancel();
  const ::cellaserv::Cancel& cancel() const;
  ::cellaserv::Cancel* release_cancel();
  ::cellaserv::Cancel* mutable_cancel();
  void set_allocated_cancel(::cellaserv::Cancel* cancel);
  private:
  const ::cellaserv::Cancel& _internal_cancel() const;
  ::cellaserv::Cancel* _internal_mutable_cancel();
  public:
  void unsafe_arena_set_allocated_cancel(
      ::cellaserv::Cancel* cancel);
  ::cellaserv::Cancel* unsafe_arena_release_cancel();

  // .cellaserv.Subscribe subscribe = 4;
  bool has_subscribe() const;
  private:
  bool _internal_has_subscribe() const;
  public:
  void clear_subscribe();
  const ::cellaserv::Subscribe& subscribe() const;
  ::cellaserv::Subscribe* release_subscribe();
  ::cellaserv::Subscribe* mutable_subscribe();
  void set_allocated_subscribe(::cellaserv::Subscribe* subscribe);
  private:
  const ::cellaserv::Subscribe& _internal_subscribe() const;
  ::cellaserv::Subscribe* _internal_mutable_subscribe();
  public:
  void unsafe_arena_set_allocated_subscribe(
      ::cellaserv::Subscribe* subscribe);
  ::cellaserv::Subscribe* unsafe_arena_release_subscribe();

  // .cellaserv.Publish publish = 5;
  bool has_publish() const;
  private:
  bool _internal_has_publish() const;
  public:
  void clear_publish();
  const ::cellaserv::Publish& publish() const;
  ::cellaserv::Publish* release_publish();
  ::cellaserv::Publish* mutable_publish();
  void set_allocated_publish(::cellaserv::Publish* publish);
  private:
  const ::cellaserv::Publish& _internal_publish() const;
  ::cellaserv::Publish* _internal_mutable_publish();
  public:
  void unsafe_arena_set_allocated_publish(
      ::cellaserv::Publish* publish);
  ::cellaserv::Publish* unsafe_arena_release_publish();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:cellaserv.Message)
 private:
  class _Internal;
  void set_has_request();
  void set_has_reply();
  void set_has_cancel();
  void set_has_subscribe();
  void set_has_publish();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageUnion {
    MessageUnion() {}
    ::cellaserv::Request* request_;
    ::cellaserv::Reply* reply_;
    ::cellaserv::Cancel* cancel_;
    ::cellaserv::Subscribe* subscribe_;
    ::cellaserv::Publish* publish_;
  } message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_cellaserv_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// fixed64 id = 1;
inline bool Request::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Request::has_id() const {
  return _internal_has_id();
}
inline void Request::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Request::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Request::id() const {
  // @@protoc_insertion_point(field_get:cellaserv.Request.id)
  return _internal_id();
}
inline void Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  id_ = value;
}
inline void Request::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cellaserv.Request.id)
}

// string name = 2;
inline bool Request::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request::has_name() const {
  return _internal_has_name();
}
inline void Request::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request::name() const {
  // @@protoc_insertion_point(field_get:cellaserv.Request.name)
  return _internal_name();
}
inline void Request::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:cellaserv.Request.name)
}
inline std::string* Request::mutable_name() {
  // @@protoc_insertion_point(field_mutable:cellaserv.Request.name)
  return _internal_mutable_name();
}
inline const std::string& Request::_internal_name() const {
  return name_.Get();
}
inline void Request::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cellaserv.Request.name)
}
inline void Request::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cellaserv.Request.name)
}
inline void Request::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Request.name)
}
inline std::string* Request::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_name() {
  // @@protoc_insertion_point(field_release:cellaserv.Request.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Request.name)
}

// string identification = 3;
inline bool Request::_internal_has_identification() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request::has_identification() const {
  return _internal_has_identification();
}
inline void Request::clear_identification() {
  identification_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Request::identification() const {
  // @@protoc_insertion_point(field_get:cellaserv.Request.identification)
  return _internal_identification();
}
inline void Request::set_identification(const std::string& value) {
  _internal_set_identification(value);
  // @@protoc_insertion_point(field_set:cellaserv.Request.identification)
}
inline std::string* Request::mutable_identification() {
  // @@protoc_insertion_point(field_mutable:cellaserv.Request.identification)
  return _internal_mutable_identification();
}
inline const std::string& Request::_internal_identification() const {
  return identification_.Get();
}
inline void Request::_internal_set_identification(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  identification_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_identification(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  identification_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cellaserv.Request.identification)
}
inline void Request::set_identification(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  identification_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cellaserv.Request.identification)
}
inline void Request::set_identification(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  identification_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Request.identification)
}
inline std::string* Request::_internal_mutable_identification() {
  _has_bits_[0] |= 0x00000002u;
  return identification_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_identification() {
  // @@protoc_insertion_point(field_release:cellaserv.Request.identification)
  if (!_internal_has_identification()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return identification_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_identification(std::string* identification) {
  if (identification != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  identification_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identification,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Request.identification)
}

// string method = 4;
inline bool Request::_internal_has_method() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Request::has_method() const {
  return _internal_has_method();
}
inline void Request::clear_method() {
  method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Request::method() const {
  // @@protoc_insertion_point(field_get:cellaserv.Request.method)
  return _internal_method();
}
inline void Request::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:cellaserv.Request.method)
}
inline std::string* Request::mutable_method() {
  // @@protoc_insertion_point(field_mutable:cellaserv.Request.method)
  return _internal_mutable_method();
}
inline const std::string& Request::_internal_method() const {
  return method_.Get();
}
inline void Request::_internal_set_method(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_method(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  method_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cellaserv.Request.method)
}
inline void Request::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cellaserv.Request.method)
}
inline void Request::set_method(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Request.method)
}
inline std::string* Request::_internal_mutable_method() {
  _has_bits_[0] |= 0x00000004u;
  return method_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_method() {
  // @@protoc_insertion_point(field_release:cellaserv.Request.method)
  if (!_internal_has_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return method_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Request.method)
}

// bytes data = 5;
inline bool Request::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Request::has_data() const {
  return _internal_has_data();
}
inline void Request::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Request::data() const {
  // @@protoc_insertion_point(field_get:cellaserv.Request.data)
  return _internal_data();
}
inline void Request::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:cellaserv.Request.data)
}
inline std::string* Request::mutable_data() {
  // @@protoc_insertion_point(field_mutable:cellaserv.Request.data)
  return _internal_mutable_data();
}
inline const std::string& Request::_internal_data() const {
  return data_.Get();
}
inline void Request::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cellaserv.Request.data)
}
inline void Request::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cellaserv.Request.data)
}
inline void Request::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Request.data)
}
inline std::string* Request::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000008u;
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_data() {
  // @@protoc_insertion_point(field_release:cellaserv.Request.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Request.data)
}

// string context_event_name = 6;
inline bool Request::_internal_has_context_event_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Request::has_context_event_name() const {
  return _internal_has_context_event_name();
}
inline void Request::clear_context_event_name() {
  context_event_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Request::context_event_name() const {
  // @@protoc_insertion_point(field_get:cellaserv.Request.context_event_name)
  return _internal_context_event_name();
}
inline void Request::set_context_event_name(const std::string& value) {
  _internal_set_context_event_name(value);
  // @@protoc_insertion_point(field_set:cellaserv.Request.context_event_name)
}
inline std::string* Request::mutable_context_event_name() {
  // @@protoc_insertion_point(field_mutable:cellaserv.Request.context_event_name)
  return _internal_mutable_context_event_name();
}
inline const std::string& Request::_internal_context_event_name() const {
  return context_event_name_.Get();
}
inline void Request::_internal_set_context_event_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  context_event_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_context_event_name(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  context_event_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cellaserv.Request.context_event_name)
}
inline void Request::set_context_event_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  context_event_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cellaserv.Request.context_event_name)
}
inline void Request::set_context_event_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  context_event_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Request.context_event_name)
}
inline std::string* Request::_internal_mutable_context_event_name() {
  _has_bits_[0] |= 0x00000010u;
  return context_event_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_context_event_name() {
  // @@protoc_insertion_point(field_release:cellaserv.Request.context_event_name)
  if (!_internal_has_context_event_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return context_event_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_context_event_name(std::string* context_event_name) {
  if (context_event_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  context_event_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context_event_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Request.context_event_name)
}

// -------------------------------------------------------------------

// Cancel

// fixed64 id = 1;
inline bool Cancel::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Cancel::has_id() const {
  return _internal_has_id();
}
inline void Cancel::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Cancel::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Cancel::id() const {
  // @@protoc_insertion_point(field_get:cellaserv.Cancel.id)
  return _internal_id();
}
inline void Cancel::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void Cancel::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cellaserv.Cancel.id)
}

// -------------------------------------------------------------------

// Reply_Error

// .cellaserv.Reply.Error.Type type = 1;
inline bool Reply_Error::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Reply_Error::has_type() const {
  return _internal_has_type();
}
inline void Reply_Error::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::cellaserv::Reply_Error_Type Reply_Error::_internal_type() const {
  return static_cast< ::cellaserv::Reply_Error_Type >(type_);
}
inline ::cellaserv::Reply_Error_Type Reply_Error::type() const {
  // @@protoc_insertion_point(field_get:cellaserv.Reply.Error.type)
  return _internal_type();
}
inline void Reply_Error::_internal_set_type(::cellaserv::Reply_Error_Type value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void Reply_Error::set_type(::cellaserv::Reply_Error_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:cellaserv.Reply.Error.type)
}

// string what = 2;
inline bool Reply_Error::_internal_has_what() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Reply_Error::has_what() const {
  return _internal_has_what();
}
inline void Reply_Error::clear_what() {
  what_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Reply_Error::what() const {
  // @@protoc_insertion_point(field_get:cellaserv.Reply.Error.what)
  return _internal_what();
}
inline void Reply_Error::set_what(const std::string& value) {
  _internal_set_what(value);
  // @@protoc_insertion_point(field_set:cellaserv.Reply.Error.what)
}
inline std::string* Reply_Error::mutable_what() {
  // @@protoc_insertion_point(field_mutable:cellaserv.Reply.Error.what)
  return _internal_mutable_what();
}
inline const std::string& Reply_Error::_internal_what() const {
  return what_.Get();
}
inline void Reply_Error::_internal_set_what(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  what_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Reply_Error::set_what(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  what_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cellaserv.Reply.Error.what)
}
inline void Reply_Error::set_what(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  what_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cellaserv.Reply.Error.what)
}
inline void Reply_Error::set_what(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  what_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Reply.Error.what)
}
inline std::string* Reply_Error::_internal_mutable_what() {
  _has_bits_[0] |= 0x00000001u;
  return what_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Reply_Error::release_what() {
  // @@protoc_insertion_point(field_release:cellaserv.Reply.Error.what)
  if (!_internal_has_what()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return what_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Reply_Error::set_allocated_what(std::string* what) {
  if (what != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  what_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), what,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Reply.Error.what)
}

// -------------------------------------------------------------------

// Reply

// fixed64 id = 1;
inline bool Reply::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Reply::has_id() const {
  return _internal_has_id();
}
inline void Reply::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Reply::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Reply::id() const {
  // @@protoc_insertion_point(field_get:cellaserv.Reply.id)
  return _internal_id();
}
inline void Reply::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void Reply::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cellaserv.Reply.id)
}

// bytes data = 2;
inline bool Reply::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Reply::has_data() const {
  return _internal_has_data();
}
inline void Reply::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Reply::data() const {
  // @@protoc_insertion_point(field_get:cellaserv.Reply.data)
  return _internal_data();
}
inline void Reply::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:cellaserv.Reply.data)
}
inline std::string* Reply::mutable_data() {
  // @@protoc_insertion_point(field_mutable:cellaserv.Reply.data)
  return _internal_mutable_data();
}
inline const std::string& Reply::_internal_data() const {
  return data_.Get();
}
inline void Reply::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Reply::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cellaserv.Reply.data)
}
inline void Reply::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cellaserv.Reply.data)
}
inline void Reply::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Reply.data)
}
inline std::string* Reply::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Reply::release_data() {
  // @@protoc_insertion_point(field_release:cellaserv.Reply.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Reply::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Reply.data)
}

// .cellaserv.Reply.Error error = 3;
inline bool Reply::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || error_ != nullptr);
  return value;
}
inline bool Reply::has_error() const {
  return _internal_has_error();
}
inline void Reply::clear_error() {
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::cellaserv::Reply_Error& Reply::_internal_error() const {
  const ::cellaserv::Reply_Error* p = error_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cellaserv::Reply_Error*>(
      &::cellaserv::_Reply_Error_default_instance_);
}
inline const ::cellaserv::Reply_Error& Reply::error() const {
  // @@protoc_insertion_point(field_get:cellaserv.Reply.error)
  return _internal_error();
}
inline void Reply::unsafe_arena_set_allocated_error(
    ::cellaserv::Reply_Error* error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cellaserv.Reply.error)
}
inline ::cellaserv::Reply_Error* Reply::release_error() {
  _has_bits_[0] &= ~0x00000002u;
  ::cellaserv::Reply_Error* temp = error_;
  error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cellaserv::Reply_Error* Reply::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:cellaserv.Reply.error)
  _has_bits_[0] &= ~0x00000002u;
  ::cellaserv::Reply_Error* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::cellaserv::Reply_Error* Reply::_internal_mutable_error() {
  _has_bits_[0] |= 0x00000002u;
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::cellaserv::Reply_Error>(GetArena());
    error_ = p;
  }
  return error_;
}
inline ::cellaserv::Reply_Error* Reply::mutable_error() {
  // @@protoc_insertion_point(field_mutable:cellaserv.Reply.error)
  return _internal_mutable_error();
}
inline void Reply::set_allocated_error(::cellaserv::Reply_Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Reply.error)
}

// -------------------------------------------------------------------

// Subscribe

// string event = 1;
inline bool Subscribe::_internal_has_event() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Subscribe::has_event() const {
  return _internal_has_event();
}
inline void Subscribe::clear_event() {
  event_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Subscribe::event() const {
  // @@protoc_insertion_point(field_get:cellaserv.Subscribe.event)
  return _internal_event();
}
inline void Subscribe::set_event(const std::string& value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:cellaserv.Subscribe.event)
}
inline std::string* Subscribe::mutable_event() {
  // @@protoc_insertion_point(field_mutable:cellaserv.Subscribe.event)
  return _internal_mutable_event();
}
inline const std::string& Subscribe::_internal_event() const {
  return event_.Get();
}
inline void Subscribe::_internal_set_event(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Subscribe::set_event(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  event_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cellaserv.Subscribe.event)
}
inline void Subscribe::set_event(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  event_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cellaserv.Subscribe.event)
}
inline void Subscribe::set_event(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  event_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Subscribe.event)
}
inline std::string* Subscribe::_internal_mutable_event() {
  _has_bits_[0] |= 0x00000001u;
  return event_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Subscribe::release_event() {
  // @@protoc_insertion_point(field_release:cellaserv.Subscribe.event)
  if (!_internal_has_event()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return event_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Subscribe::set_allocated_event(std::string* event) {
  if (event != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Subscribe.event)
}

// -------------------------------------------------------------------

// Publish

// string event = 1;
inline bool Publish::_internal_has_event() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Publish::has_event() const {
  return _internal_has_event();
}
inline void Publish::clear_event() {
  event_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Publish::event() const {
  // @@protoc_insertion_point(field_get:cellaserv.Publish.event)
  return _internal_event();
}
inline void Publish::set_event(const std::string& value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:cellaserv.Publish.event)
}
inline std::string* Publish::mutable_event() {
  // @@protoc_insertion_point(field_mutable:cellaserv.Publish.event)
  return _internal_mutable_event();
}
inline const std::string& Publish::_internal_event() const {
  return event_.Get();
}
inline void Publish::_internal_set_event(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Publish::set_event(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  event_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cellaserv.Publish.event)
}
inline void Publish::set_event(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  event_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cellaserv.Publish.event)
}
inline void Publish::set_event(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  event_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Publish.event)
}
inline std::string* Publish::_internal_mutable_event() {
  _has_bits_[0] |= 0x00000001u;
  return event_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Publish::release_event() {
  // @@protoc_insertion_point(field_release:cellaserv.Publish.event)
  if (!_internal_has_event()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return event_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Publish::set_allocated_event(std::string* event) {
  if (event != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Publish.event)
}

// bytes data = 2;
inline bool Publish::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Publish::has_data() const {
  return _internal_has_data();
}
inline void Publish::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Publish::data() const {
  // @@protoc_insertion_point(field_get:cellaserv.Publish.data)
  return _internal_data();
}
inline void Publish::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:cellaserv.Publish.data)
}
inline std::string* Publish::mutable_data() {
  // @@protoc_insertion_point(field_mutable:cellaserv.Publish.data)
  return _internal_mutable_data();
}
inline const std::string& Publish::_internal_data() const {
  return data_.Get();
}
inline void Publish::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Publish::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cellaserv.Publish.data)
}
inline void Publish::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cellaserv.Publish.data)
}
inline void Publish::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Publish.data)
}
inline std::string* Publish::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000002u;
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Publish::release_data() {
  // @@protoc_insertion_point(field_release:cellaserv.Publish.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Publish::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Publish.data)
}

// -------------------------------------------------------------------

// Message

// .cellaserv.Request request = 1;
inline bool Message::_internal_has_request() const {
  return message_case() == kRequest;
}
inline bool Message::has_request() const {
  return _internal_has_request();
}
inline void Message::set_has_request() {
  _oneof_case_[0] = kRequest;
}
inline void Message::clear_request() {
  if (_internal_has_request()) {
    if (GetArena() == nullptr) {
      delete message_.request_;
    }
    clear_has_message();
  }
}
inline ::cellaserv::Request* Message::release_request() {
  // @@protoc_insertion_point(field_release:cellaserv.Message.request)
  if (_internal_has_request()) {
    clear_has_message();
      ::cellaserv::Request* temp = message_.request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cellaserv::Request& Message::_internal_request() const {
  return _internal_has_request()
      ? *message_.request_
      : *reinterpret_cast< ::cellaserv::Request*>(&::cellaserv::_Request_default_instance_);
}
inline const ::cellaserv::Request& Message::request() const {
  // @@protoc_insertion_point(field_get:cellaserv.Message.request)
  return _internal_request();
}
inline ::cellaserv::Request* Message::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cellaserv.Message.request)
  if (_internal_has_request()) {
    clear_has_message();
    ::cellaserv::Request* temp = message_.request_;
    message_.request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_request(::cellaserv::Request* request) {
  clear_message();
  if (request) {
    set_has_request();
    message_.request_ = request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cellaserv.Message.request)
}
inline ::cellaserv::Request* Message::_internal_mutable_request() {
  if (!_internal_has_request()) {
    clear_message();
    set_has_request();
    message_.request_ = CreateMaybeMessage< ::cellaserv::Request >(GetArena());
  }
  return message_.request_;
}
inline ::cellaserv::Request* Message::mutable_request() {
  // @@protoc_insertion_point(field_mutable:cellaserv.Message.request)
  return _internal_mutable_request();
}

// .cellaserv.Reply reply = 2;
inline bool Message::_internal_has_reply() const {
  return message_case() == kReply;
}
inline bool Message::has_reply() const {
  return _internal_has_reply();
}
inline void Message::set_has_reply() {
  _oneof_case_[0] = kReply;
}
inline void Message::clear_reply() {
  if (_internal_has_reply()) {
    if (GetArena() == nullptr) {
      delete message_.reply_;
    }
    clear_has_message();
  }
}
inline ::cellaserv::Reply* Message::release_reply() {
  // @@protoc_insertion_point(field_release:cellaserv.Message.reply)
  if (_internal_has_reply()) {
    clear_has_message();
      ::cellaserv::Reply* temp = message_.reply_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cellaserv::Reply& Message::_internal_reply() const {
  return _internal_has_reply()
      ? *message_.reply_
      : *reinterpret_cast< ::cellaserv::Reply*>(&::cellaserv::_Reply_default_instance_);
}
inline const ::cellaserv::Reply& Message::reply() const {
  // @@protoc_insertion_point(field_get:cellaserv.Message.reply)
  return _internal_reply();
}
inline ::cellaserv::Reply* Message::unsafe_arena_release_reply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cellaserv.Message.reply)
  if (_internal_has_reply()) {
    clear_has_message();
    ::cellaserv::Reply* temp = message_.reply_;
    message_.reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_reply(::cellaserv::Reply* reply) {
  clear_message();
  if (reply) {
    set_has_reply();
    message_.reply_ = reply;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cellaserv.Message.reply)
}
inline ::cellaserv::Reply* Message::_internal_mutable_reply() {
  if (!_internal_has_reply()) {
    clear_message();
    set_has_reply();
    message_.reply_ = CreateMaybeMessage< ::cellaserv::Reply >(GetArena());
  }
  return message_.reply_;
}
inline ::cellaserv::Reply* Message::mutable_reply() {
  // @@protoc_insertion_point(field_mutable:cellaserv.Message.reply)
  return _internal_mutable_reply();
}

// .cellaserv.Cancel cancel = 3;
inline bool Message::_internal_has_cancel() const {
  return message_case() == kCancel;
}
inline bool Message::has_cancel() const {
  return _internal_has_cancel();
}
inline void Message::set_has_cancel() {
  _oneof_case_[0] = kCancel;
}
inline void Message::clear_cancel() {
  if (_internal_has_cancel()) {
    if (GetArena() == nullptr) {
      delete message_.cancel_;
    }
    clear_has_message();
  }
}
inline ::cellaserv::Cancel* Message::release_cancel() {
  // @@protoc_insertion_point(field_release:cellaserv.Message.cancel)
  if (_internal_has_cancel()) {
    clear_has_message();
      ::cellaserv::Cancel* temp = message_.cancel_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.cancel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cellaserv::Cancel& Message::_internal_cancel() const {
  return _internal_has_cancel()
      ? *message_.cancel_
      : *reinterpret_cast< ::cellaserv::Cancel*>(&::cellaserv::_Cancel_default_instance_);
}
inline const ::cellaserv::Cancel& Message::cancel() const {
  // @@protoc_insertion_point(field_get:cellaserv.Message.cancel)
  return _internal_cancel();
}
inline ::cellaserv::Cancel* Message::unsafe_arena_release_cancel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cellaserv.Message.cancel)
  if (_internal_has_cancel()) {
    clear_has_message();
    ::cellaserv::Cancel* temp = message_.cancel_;
    message_.cancel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_cancel(::cellaserv::Cancel* cancel) {
  clear_message();
  if (cancel) {
    set_has_cancel();
    message_.cancel_ = cancel;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cellaserv.Message.cancel)
}
inline ::cellaserv::Cancel* Message::_internal_mutable_cancel() {
  if (!_internal_has_cancel()) {
    clear_message();
    set_has_cancel();
    message_.cancel_ = CreateMaybeMessage< ::cellaserv::Cancel >(GetArena());
  }
  return message_.cancel_;
}
inline ::cellaserv::Cancel* Message::mutable_cancel() {
  // @@protoc_insertion_point(field_mutable:cellaserv.Message.cancel)
  return _internal_mutable_cancel();
}

// .cellaserv.Subscribe subscribe = 4;
inline bool Message::_internal_has_subscribe() const {
  return message_case() == kSubscribe;
}
inline bool Message::has_subscribe() const {
  return _internal_has_subscribe();
}
inline void Message::set_has_subscribe() {
  _oneof_case_[0] = kSubscribe;
}
inline void Message::clear_subscribe() {
  if (_internal_has_subscribe()) {
    if (GetArena() == nullptr) {
      delete message_.subscribe_;
    }
    clear_has_message();
  }
}
inline ::cellaserv::Subscribe* Message::release_subscribe() {
  // @@protoc_insertion_point(field_release:cellaserv.Message.subscribe)
  if (_internal_has_subscribe()) {
    clear_has_message();
      ::cellaserv::Subscribe* temp = message_.subscribe_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.subscribe_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cellaserv::Subscribe& Message::_internal_subscribe() const {
  return _internal_has_subscribe()
      ? *message_.subscribe_
      : *reinterpret_cast< ::cellaserv::Subscribe*>(&::cellaserv::_Subscribe_default_instance_);
}
inline const ::cellaserv::Subscribe& Message::subscribe() const {
  // @@protoc_insertion_point(field_get:cellaserv.Message.subscribe)
  return _internal_subscribe();
}
inline ::cellaserv::Subscribe* Message::unsafe_arena_release_subscribe() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cellaserv.Message.subscribe)
  if (_internal_has_subscribe()) {
    clear_has_message();
    ::cellaserv::Subscribe* temp = message_.subscribe_;
    message_.subscribe_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_subscribe(::cellaserv::Subscribe* subscribe) {
  clear_message();
  if (subscribe) {
    set_has_subscribe();
    message_.subscribe_ = subscribe;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cellaserv.Message.subscribe)
}
inline ::cellaserv::Subscribe* Message::_internal_mutable_subscribe() {
  if (!_internal_has_subscribe()) {
    clear_message();
    set_has_subscribe();
    message_.subscribe_ = CreateMaybeMessage< ::cellaserv::Subscribe >(GetArena());
  }
  return message_.subscribe_;
}
inline ::cellaserv::Subscribe* Message::mutable_subscribe() {
  // @@protoc_insertion_point(field_mutable:cellaserv.Message.subscribe)
  return _internal_mutable_subscribe();
}

// .cellaserv.Publish publish = 5;
inline bool Message::_internal_has_publish() const {
  return message_case() == kPublish;
}
inline bool Message::has_publish() const {
  return _internal_has_publish();
}
inline void Message::set_has_publish() {
  _oneof_case_[0] = kPublish;
}
inline void Message::clear_publish() {
  if (_internal_has_publish()) {
    if (GetArena() == nullptr) {
      delete message_.publish_;
    }
    clear_has_message();
  }
}
inline ::cellaserv::Publish* Message::release_publish() {
  // @@protoc_insertion_point(field_release:cellaserv.Message.publish)
  if (_internal_has_publish()) {
    clear_has_message();
      ::cellaserv::Publish* temp = message_.publish_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.publish_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cellaserv::Publish& Message::_internal_publish() const {
  return _internal_has_publish()
      ? *message_.publish_
      : *reinterpret_cast< ::cellaserv::Publish*>(&::cellaserv::_Publish_default_instance_);
}
inline const ::cellaserv::Publish& Message::publish() const {
  // @@protoc_insertion_point(field_get:cellaserv.Message.publish)
  return _internal_publish();
}
inline ::cellaserv::Publish* Message::unsafe_arena_release_publish() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cellaserv.Message.publish)
  if (_internal_has_publish()) {
    clear_has_message();
    ::cellaserv::Publish* temp = message_.publish_;
    message_.publish_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_publish(::cellaserv::Publish* publish) {
  clear_message();
  if (publish) {
    set_has_publish();
    message_.publish_ = publish;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cellaserv.Message.publish)
}
inline ::cellaserv::Publish* Message::_internal_mutable_publish() {
  if (!_internal_has_publish()) {
    clear_message();
    set_has_publish();
    message_.publish_ = CreateMaybeMessage< ::cellaserv::Publish >(GetArena());
  }
  return message_.publish_;
}
inline ::cellaserv::Publish* Message::mutable_publish() {
  // @@protoc_insertion_point(field_mutable:cellaserv.Message.publish)
  return _internal_mutable_publish();
}

inline bool Message::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Message::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Message::MessageCase Message::message_case() const {
  return Message::MessageCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cellaserv

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::cellaserv::Reply_Error_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cellaserv::Reply_Error_Type>() {
  return ::cellaserv::Reply_Error_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cellaserv_2eproto
